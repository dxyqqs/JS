// javascript for event

// 处理浏览器事件
// 修复事件对象
// 修复IE中的函数作用域
// IE浏览器的atachEvent可以反复绑定，但是其他浏览器的addEventListener不可以
// 同一个函数被多个事件绑定如何处理？需要区分，此问题解决,需要引入DOM缓存函数
/* require(../d_DOMCache/dom.cache.js)*/
;(function()
{
	var fixEvent={},//保存事件函数{函数临时名称:重构的函数}
		win=window,
		doc=document,
		attachEvent='attachEvent' in win,//针对IE6~8做出判断
		replaceNum=function(num)
		{
			var charArr=['a','b','c','d','e','f','g','h','i','k'];//替换数字
			
			return num.toString().replace(/\d/g,function(a){return charArr[a]});
		}
		getNow=function()//获取当前时间戳
		{
			return (new Date).getTime();
		},
		functionIdArray="functionIdArray_"+replaceNum(getNow());//用于函数上，作为属性引用重构函数	
	//简单克隆对象，复制事件对象
	function cloneObj(o)
	{
		var newO={};
		for(var i in o)
		{
			newO[i]=o[i];
		}
		return newO;
	}
	//IE浏览器需要在事件前加‘on’
	function fix_IE_evt(method)
	{
		if(method=='mousewheel'||method=='DOMMouseScroll')
		{
			method='onmousewheel' in doc?'mousewheel':'DOMMouseScroll';//滑轮事件
		}
		if(method=='input'||method=='propertychange')//输入事件
		{
			method='oninput' in doc.createElement('textarea')?'input':'propertychange';
		}
		if(attachEvent)return 'on'+method;
		
		return method
	}
	//兼容的事件对象
	function fixE(e)
	{
		var e=window.event||e,
			newE=cloneObj(e);
		//触发对象
		if(!('target' in newE))newE.target=e.srcElement;
		//关联对象
		if(!('relatedTarget' in newE))newE.relatedTarget=e.toElement||e.fromElement;
		//页面鼠标位置
		if(!('pageX' in newE))//修复页面坐标事件
		{
			newE.pageX=newE.clientX+Math.max(doc.documentElement.scrollLeft,doc.body.scrollLeft);
			newE.pageY=newE.clientY+Math.max(doc.documentElement.scrollTop,doc.body.scrollTop);
		}
		//处理鼠标滚动方向
		
		if(!('wheelDelta' in e))//修复鼠标滚轮方向
		{
			newE.detail=Math.abs(e.detail)/e.detail*-1;
		}else
		{
			newE.detail=Math.abs(e.wheelDelta)/e.wheelDelta;
		}
		//鼠标按键
		if(!('which' in newE))//修复鼠标按键位数
		{
			if(e.type.indexOf('mouse')>=0)
			{
				//IE 鼠标按键对应0无 1左 2右 4中 其他键的值都是这1 2 4的合值
				var val=e.button;
				if(!val||val%2!=0)
				{
					newE.which=1;
				}else if(val==4)
				{
					newE.which=2;
				}else
				{
					newE.which=3;
				}
				
			}else if(e.type.indexOf('key')>=0)
			{
				newE.which=e.keyCode;
			}
		}
		//修复阻止默认事件
		if('preventDefault' in e)
		{
			newE.preventDefault=function()
			{
				e.preventDefault()
			};
		}else if('returnValue' in e)
		{
			
			newE.preventDefault=function()
			{
				e.returnValue=false;
			};
		}
		//修复阻止冒泡
		if('stopPropergation' in e)
		{
			newE.stopPropergation=function()
			{
				e.stopPropergation()
			};
		}else if('cancelBubble' in e)
		{
			newE.stopPropergation=function()
			{
				e.cancelBubble=false;
			};
		}
		//针对onbeforeunload设定默认返回值
		newE.returnValue=function(str)
		{
			if('returnValue' in e)
			{
				e.returnValue=str;
			
			}else
			{
				return str;
			}
		
		}();
		//移除事件名称前的on
		newE.type=newE.type.replace(/^on/,'');
		return newE;
	}
	//检测函数是否已被执行过绑定
	function checkFunctionId(dom,func)
	{
		
		var functionEvent=domCache(dom,"funEventObj");//一个对象,保存在DOMCache中，保存了绑定在此对象上的函数
		
		if(functionIdArray in func)
		{
			var arr=func[functionIdArray],//返回原函数中保存的重构函数引用组成的数组
				n=arr.length;			  
			if(!n)return false;//数组为空
			for(var i=0;i<n;i++)
			{
				//存在此函数的引用
				if(arr[i] in functionEvent)
				{
					return  functionEvent[arr[i]];//返回引用的函数
					 
				}else if(i+1==n)//循环结束
				{
					return false;
				}
			}
						
		}
		
		return false;
	}
	//修改function作用域并添加进事件缓存对象
	function addFunctionId(target,func)
	{
		//检测函数是否已添加，如果没有则添加,会在函数上添加一个事件id
		//返回修改过的函数
		var fun=checkFunctionId(target,func);
		if(fun)return fun;//返回已重构的函数引用
		var str='functionId'+getNow(),//注册键名
			arr=[];
		//获取事件函数上的函数id数组
		if(functionIdArray in func)
		{
			arr=func[functionIdArray];
		}else
		{
			func[functionIdArray]=arr;
		}
		//键名保存到数组上		
		arr.push(str);
		
		var newFunction=function()//实际绑定函数，移除事件时需要操作此函数
		{
			var e=fixE(window.event||arguments[0]);
			func.call(target,e);//获取额外的传入参数
		}
		var obj=domCache(target,"funEventObj");//DOM缓存中保存的事件引用对象
		
		if(!obj)
		{
			obj=domCache(target,"funEventObj",{})
		}
		
		obj[str]=newFunction;//保存重构函数到DOM缓存中
		
		
		
		return newFunction;
	}
	
	function addEvent(dom,method,func,useCapture)//添加事件
	{
		
		if(attachEvent)
		{
			addEvent=function(dom,method,func)
			{
				var method=fix_IE_evt(method);
				 
				dom.attachEvent(method,addFunctionId(dom,func));
			}
		}else
		{
			addEvent=function(dom,method,func,useCapture)
			{
			
				
				useCapture=useCapture===true?useCapture:false;//事件监听方式
				var method=fix_IE_evt(method);
				dom.addEventListener(method,addFunctionId(dom,func),useCapture);
				
			}
		}
		addEvent.apply(null,arguments);
	}
	
	function delEvent(dom,method,func,useCapture)//移除事件
	{
		if(attachEvent)
		{
			delEvent=function(dom,method,func)
			{
				var method=fixOnEvent(method),
					_fuc=checkFunctionId(dom,func);
				if(_fuc)
				{
					dom.detachEvent(method,_fuc);
				}
				
				
			}
		}else
		{
			delEvent=function(dom,method,func,useCapture)
			{
				var useCapture=useCapture===true?useCapture:false,//事件监听方式
					_fuc=checkFunctionId(dom,func);
				if(_fuc)
				{
					dom.removeEventListener(method,_fuc,useCapture);
				}
				
				
			}
		}
		delEvent.apply(null,arguments);
	}
	
	function EventMethod(dom)//事件处理构造函数
	{
		this.dom=dom||win;
	}
	var pro=EventMethod.prototype;
	pro.addEvent=function(method,func,useCapture)
	{
		addEvent(this.dom,method,func,useCapture);
		return this;
	}
	pro.delEvent=function(method,func,useCapture)
	{
		delEvent(this.dom,method,func,useCapture);
		return this;
	}
	
	window.aly =function(dom)// an lan yun
	{
		return new EventMethod(dom);
	}
	
	
})();
